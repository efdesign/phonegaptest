var App=angular.module("sei",["ui.router","ngMaterial"]);App.run(["$state",function(e){"use strict";e.go("app.main")}]),angular.module("ngLocale",[],["$provide",function(e){function r(e){e+="";var r=e.indexOf(".");return-1==r?0:e.length-r-1}function n(e,n){var o=n;void 0===o&&(o=Math.min(r(e),3));var t=Math.pow(10,o),i=(e*t|0)%t;return{v:o,f:i}}var o={ZERO:"zero",ONE:"one",TWO:"two",FEW:"few",MANY:"many",OTHER:"other"};e.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:["domenica","lunedì","martedì","mercoledì","giovedì","venerdì","sabato"],MONTH:["gennaio","febbraio","marzo","aprile","maggio","giugno","luglio","agosto","settembre","ottobre","novembre","dicembre"],SHORTDAY:["dom","lun","mar","mer","gio","ven","sab"],SHORTMONTH:["gen","feb","mar","apr","mag","giu","lug","ago","set","ott","nov","dic"],fullDate:"EEEE d MMMM y",longDate:"d MMMM y",medium:"dd MMM y HH:mm:ss",mediumDate:"dd/MM/yyyy",mediumTime:"HH:mm:ss","short":"dd/MM/yy HH:mm",shortDate:"dd/MM/yy",shortTime:"HH:mm"},NUMBER_FORMATS:{CURRENCY_SYM:"€",DECIMAL_SEP:",",GROUP_SEP:".",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-",negSuf:" ¤",posPre:"",posSuf:" ¤"}]},id:"it",pluralCat:function(e,r){var t=0|e,i=n(e,r);return 1==t&&0==i.v?o.ONE:o.OTHER}})}]),App.config(["$stateProvider","$locationProvider","$urlRouterProvider","RouteHelpersProvider",function(e,r,n,o){"use strict";r.html5Mode(!1),n.otherwise("/app/welcome"),e.state("app",{url:"/app","abstract":!0,templateUrl:o.basepath("app.html"),controller:"AppController"}).state("app.main",{url:"/main",controller:"AppController",templateUrl:o.basepath("mealshare/main.html")})}]).config(["$mdThemingProvider",function(e){"use strict";e.theme("default").primaryPalette("pink").accentPalette("orange")}]).config(["$controllerProvider","$compileProvider","$filterProvider","$provide",function(e,r,n,o){"use strict";App.controller=e.register,App.directive=r.directive,App.filter=n.register,App.factory=o.factory,App.service=o.service,App.constant=o.constant,App.value=o.value}]),App.constant("APP_REQUIRES",{scripts:{fastclick:["vendor/fastclick/lib/fastclick.js"],modernizr:["vendor/modernizr/modernizr.js"],moment:["vendor/moment/min/moment-with-locales.min.js"]},modules:[]}),App.service("browser",function(){"use strict";var e,r,n=function(e){e=e.toLowerCase();var r=/(opr)[\/]([\w.]+)/.exec(e)||/(chrome)[ \/]([\w.]+)/.exec(e)||/(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(e)||/(webkit)[ \/]([\w.]+)/.exec(e)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e)||/(msie) ([\w.]+)/.exec(e)||e.indexOf("trident")>=0&&/(rv)(?::| )([\w.]+)/.exec(e)||e.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e)||[],n=/(ipad)/.exec(e)||/(iphone)/.exec(e)||/(android)/.exec(e)||/(windows phone)/.exec(e)||/(win)/.exec(e)||/(mac)/.exec(e)||/(linux)/.exec(e)||/(cros)/i.exec(e)||[];return{browser:r[3]||r[1]||"",version:r[2]||"0",platform:n[0]||""}};if(e=n(window.navigator.userAgent),r={},e.browser&&(r[e.browser]=!0,r.version=e.version,r.versionNumber=parseInt(e.version)),e.platform&&(r[e.platform]=!0),(r.android||r.ipad||r.iphone||r["windows phone"])&&(r.mobile=!0),(r.cros||r.mac||r.linux||r.win)&&(r.desktop=!0),(r.chrome||r.opr||r.safari)&&(r.webkit=!0),r.rv){var o="msie";e.browser=o,r[o]=!0}if(r.opr){var t="opera";e.browser=t,r[t]=!0}if(r.safari&&r.android){var i="android";e.browser=i,r[i]=!0}return r.name=e.browser,r.platform=e.platform,r}),App.provider("RouteHelpers",["APP_REQUIRES",function(e){"use strict";this.basepath=function(e){return"app/views/"+e},this.resolveFor=function(){var r=arguments;return{deps:["$ocLazyLoad","$q",function(n,o){function t(e){return"function"==typeof e?a.then(e):a.then(function(){var r=i(e);return r?n.load(r):$.error("Route resolve: Bad resource name ["+e+"]")})}function i(r){if(e.modules)for(var n in e.modules)if(e.modules[n].name&&e.modules[n].name===r)return e.modules[n];return e.scripts&&e.scripts[r]}for(var a=o.when(1),p=0,c=r.length;c>p;p++)a=t(r[p]);return a}]}},this.$get=function(){return{basepath:this.basepath}}}]),App.controller("AppController",["$scope","$rootScope","$mdSidenav","$mdToast",function(e,r,n,o){"use strict";function t(e){e.friends||(e.friends=[]),e.friends.push(S),O=s()}function i(e){if(e.friends){var r=e.friends.indexOf(S);-1!==r?e.friends.splice(r,1):c(S.name+" non ha ordinato un "+e.name+" !!!")}else e.friends=[],c(h.NO_ELEMENTS_TO_REMOVE);O=s()}function a(e){S=e}function p(){return S}function c(e){o.show(o.simple().content(e).hideDelay(6e3))}function s(){return E.reduce(function(e,r){var n=r.friends||[];return e.concat(n)},[])}function m(e){return O.filter(function(r){return r===e}).length}function u(e){console.log("removing..."+e),E.splice(E.indexOf(e)),c(e.name+" rimosso")}function l(){e.app.compact=!e.app.compact}function d(){e.app.orderDetailsShown=!e.app.orderDetailsShown}function f(){angular.forEach(E,function(e){e.friends=[]}),O=s()}function g(){E.push(angular.copy(A))}function v(){return O}var h={NO_ELEMENTS_TO_REMOVE:"Non ci sono elementi da rimuovere!"};r.$on("$stateChangeSuccess",function(){var e=n(".left");console.log("changing",e),e.isOpen()&&e.toggle()});var w=[{name:" Default",gender:"him",portrait:"app/img/generic2.png"},{name:"mario",gender:"him",portrait:"app/img/mario.jpg"},{name:"laura",gender:"her",portrait:"app/img/laura.jpeg"},{name:"enrico",gender:"him",portrait:"app/img/enrico2.jpg"},{name:"ferdinando",gender:"him",portrait:"app/img/ferdinando.jpg"},{name:"giordano",gender:"him",portrait:"app/img/giordano.jpg"},{name:"walter",gender:"him",portrait:"app/img/walter.jpg"},{name:"roberto",gender:"him",portrait:"app/img/roberto.jpg"},{name:"rosario",gender:"him",portrait:"app/img/rosario.jpg"},{name:"fabio",gender:"him",portrait:"app/img/fabio.jpg"},{name:"paola",gender:"her",portrait:"app/img/paola.jpg"},{name:"alessia",gender:"her",portrait:"app/img/alessia.png"},{name:"serena",gender:"her",portrait:"app/img/serena.jpg"}],M=[{name:"cornetto"},{name:"cappuccino"},{name:"caffè"},{name:"acqua"},{name:"succo di frutta"}],E=[M[2],M[1],M[0]],b=!1,A={name:""},O=[],S=w[0];e.app={hints:{fastMode:!0,hideHint:function(r){e.app.hints[r]=!1}},name:"Order IT!",logo:"app/img/yummly.png",welcomeImage:"app/img/mealshare.svg",title:"MealShare!",friends:w,me:w[3],items:M,order:E,increment:t,decrement:i,orderedItems:m,remove:u,current:S,setCurrent:a,getCurrent:p,compact:b,toggleCompact:l,clearOrders:f,addOrderItem:g,getAllFriends:v,toggleOrderDetails:d}}]).filter("capitalize",function(){"use strict";return function(e){return e.charAt(0).toUpperCase()+e.slice(1)}}).directive("action",function(){"use strict";return{scope:{action:"&",actionEvent:"@"},link:function(e,r){r.on(e.actionEvent||"click",e.action)}}}),App.directive("efBadge",["$log",function(e){"use strict";return{scope:{efBadge:"="},template:'<div class="ef-badge"><ng-transclude></ng-transclude></div>',replace:!0,transclude:!0,link:function(r){e.info(r.efBadge)}}}]);
//# sourceMappingURL=data:application/json;base64,
